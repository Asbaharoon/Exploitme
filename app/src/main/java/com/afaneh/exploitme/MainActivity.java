package com.afaneh.exploitme;

import android.Manifest;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.os.Build;
import android.os.Bundle;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.app.AppCompatActivity;
import androidx.appcompat.widget.Toolbar;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;

import android.util.Log;
import android.view.View;

import android.graphics.Color;
import android.graphics.PorterDuff;
import android.os.AsyncTask;
import android.text.SpannableStringBuilder;
import android.text.Spanned;
import android.text.method.ScrollingMovementMethod;
import android.text.style.StyleSpan;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ScrollView;
import android.widget.TextView;
import android.widget.Toast;

import com.nbsp.materialfilepicker.MaterialFilePicker;
import com.nbsp.materialfilepicker.ui.FilePickerActivity;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;

public class MainActivity extends AppCompatActivity {

    public static final int PERMISSIONS_REQUEST_CODE = 0;
    public static final int FILE_PICKER_REQUEST_CODE = 1;
    Button exploitButton;
    Button pickButton;
    Button argButton;
    String pocPath;
    String pocname;
    String arg ="";
    TextView textPoc;
    TextView textView;
    ScrollView scrollView;
    TextView deviceInfo;
    InputStream is_path = null;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        Toolbar toolbar = findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);

        exploitButton = findViewById(R.id.exploit);
        pickButton = findViewById(R.id.pick);
        argButton = findViewById(R.id.arg);
        textPoc = findViewById(R.id.textView2);
        textView = findViewById(R.id.textView3);
        deviceInfo = findViewById(R.id.deviceInfo);
        scrollView = findViewById(R.id.scrollView2);

        SpannableStringBuilder ssb = new SpannableStringBuilder();
        addLabel(ssb, "Device Model", String.format("%s (Android %s)", DeviceInfo.getDeviceName(), DeviceInfo.getAndroidVersion()));
        addLabel(ssb, "Kernel Version", String.format("%s (%s)", DeviceInfo.getKernelVersion(), DeviceInfo.getDeviceArchitecture()));
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            addLabel(ssb, "Security Patch", DeviceInfo.getAndroidPatchLevel());
        }
        addLabel(ssb, "Fingerprint", DeviceInfo.getBuildFingerprint());

        deviceInfo.setText(ssb);

        textView.setMovementMethod(new ScrollingMovementMethod());

        // Pick a script from internal storage
        pickButton.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                checkPermissionsAndOpenFilePicker();
            }
        });

        exploitButton.setEnabled(false);
        argButton.setEnabled(false);

        exploitButton.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                exploitButton.setText("Exploiting...");
                addStatus("[INFO] Starting exploit process");
                exploitButton.setClickable(false);
                exploitButton.getBackground().setColorFilter(Color.GRAY, PorterDuff.Mode.MULTIPLY);
                new POCTask().execute();
            }
        });

        argButton.setOnClickListener(view -> {
            AlertDialog.Builder alert = new AlertDialog.Builder(this);
            alert.setTitle("Pass an argument");

            // Set an EditText view to get user input
            final EditText input = new EditText(this);
            alert.setView(input);

            alert.setPositiveButton("Ok", new DialogInterface.OnClickListener() {
                public void onClick(DialogInterface dialog, int whichButton) {
                    arg = input.getText().toString();
                    textPoc.setText("./" + pocname + " " + arg);
                    return;
                }
            });

            alert.setNegativeButton("Cancel",
                    new DialogInterface.OnClickListener() {
                        public void onClick(DialogInterface dialog, int which) {
                            // TODO Auto-generated method stub
                            return;
                        }
                    });
            alert.show();
        });
    }

    private static void addLabel(SpannableStringBuilder ssb, String label, String text)
    {
        int start = ssb.length();
        ssb.append(label + ": ");
        ssb.setSpan(new StyleSpan(android.graphics.Typeface.BOLD), start, ssb.length(), Spanned.SPAN_INCLUSIVE_EXCLUSIVE);
        ssb.append(text + "\n");
    }

    private void addStatus(String status)
    {
        textView.append(status + "\n");

        // auto scroll: https://stackoverflow.com/a/34866634/5768099
        int bottom = textView.getBottom() + scrollView.getPaddingBottom();
        int sy = scrollView.getScrollY();
        int sh = scrollView.getHeight();
        int delta = bottom - (sy + sh);

        scrollView.smoothScrollBy(0, delta);
    }

    private class POCTask extends AsyncTask<String, String, Boolean> {
        protected Boolean doInBackground(String... programs) {
            extractPoc(is_path);

            try {
                String [] args = {pocPath, arg};
                if(!executeNativeCode(args)) {
                    publishProgress("[ERROR] Exploit native execution failed");
                    return false;
                }

                return true;
            } catch(IOException ie) {
                addStatus(ie.toString());
                return false;
            } catch(InterruptedException io) {
                addStatus(io.toString());
                return false;
            }
        }

        private void extractPoc(InputStream path)
        {
            File pocDir = getApplicationContext().getFilesDir();
            File pocFile = new File(pocDir, "do_root");
            pocPath = pocFile.getPath();
            publishProgress("[INFO] Extracting native code from internal storage...");
            copyFile(path, pocFile.getPath());
            pocFile.setExecutable(true);
        }

        private boolean executeNativeCode(String [] args) throws IOException, InterruptedException {
            publishProgress("[INFO] Executing native root binary...");
            Process nativeApp = Runtime.getRuntime().exec(args);

            BufferedReader reader = new BufferedReader(new InputStreamReader(nativeApp.getInputStream()));

            String str;
            while((str=reader.readLine())!=null) {
                publishProgress("[NATIVE] " + str);
            }

            reader.close();

            // Waits for the command to finish.
            nativeApp.waitFor();
            return nativeApp.exitValue() == 0;
        }

        protected void onProgressUpdate(String... updates) {
            addStatus(updates[0]);
        }

        protected void onPostExecute(Boolean result) {
            if (!result) {
                addStatus("[ERROR] Exploit failed :(\n");
                exploitButton.setText(R.string.failed);
                exploitButton.setClickable(false);
            } else {
                addStatus("[SUCCESS] Enjoy your exploited device!\n");
                exploitButton.setText(R.string.exploited);
            }
        }
    }

    private static void copyFile(InputStream in, String localPath) {
        try {
            FileOutputStream out = new FileOutputStream(localPath);
            int read;
            byte[] buffer = new byte[4096];
            while ((read = in.read(buffer)) > 0) {
                out.write(buffer, 0, read);
            }
            out.close();
            in.close();

        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    private void checkPermissionsAndOpenFilePicker() {
        String permission = Manifest.permission.READ_EXTERNAL_STORAGE;

        if (ContextCompat.checkSelfPermission(this, permission) != PackageManager.PERMISSION_GRANTED) {
            if (ActivityCompat.shouldShowRequestPermissionRationale(this, permission)) {
                showError();
            } else {
                ActivityCompat.requestPermissions(this, new String[]{permission}, PERMISSIONS_REQUEST_CODE);
            }
        } else {
            openFilePicker();
        }
    }

    private void showError() {
        Toast.makeText(this, "Allow external storage reading", Toast.LENGTH_SHORT).show();
    }

    @Override
    public void onRequestPermissionsResult(int requestCode,
                                           @NonNull String[] permissions, @NonNull int[] grantResults) {
        if (requestCode == PERMISSIONS_REQUEST_CODE) {
            if (grantResults.length > 0
                    && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                openFilePicker();
            } else {
                showError();
            }
        }
    }

    private void openFilePicker() {
        new MaterialFilePicker()
                .withActivity(this)
                .withRequestCode(FILE_PICKER_REQUEST_CODE)
                .withHiddenFiles(true)
                .withTitle("Sample title")
                .start();
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);

        if (requestCode == FILE_PICKER_REQUEST_CODE && resultCode == RESULT_OK) {
            String path = data.getStringExtra(FilePickerActivity.RESULT_FILE_PATH);
            try {
                if (path != null) {
                    is_path = new FileInputStream(path);
                    Log.d("Path: ", path);
                    Toast.makeText(this, "Picked file: " + path, Toast.LENGTH_LONG).show();
                    pocname = path.substring(path.lastIndexOf("/")+1);
                    textPoc.setText("./" + pocname);
                    exploitButton.setText(R.string.exploit);
                    exploitButton.setClickable(true);
                    exploitButton.getBackground().setColorFilter(null);
                    exploitButton.setEnabled(true);
                    argButton.setEnabled(true);
                }
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        }
    }
}
